{"ast":null,"code":"import Axios from 'axios';\nimport { ShippingService } from '../../../api';\nimport { toast } from 'react-toastify';\nimport { errorHandeller } from '../../Error';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure({\n  autoClose: 2000\n}); // Index of items\n\nconst Index = async (page, limit, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}area?page=${page}&limit=${limit}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Show specific item\n\n\n_c = Index;\n\nconst Show = async (id, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}area/${id}`, header);\n\n    if (response.status === 200) {\n      return response.data;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Store item\n\n\n_c2 = Show;\n\nconst Store = async (data, header) => {\n  try {\n    const response = await Axios.post(`${ShippingService}area`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update specific item\n\n\n_c3 = Store;\n\nconst Update = async (id, data, header) => {\n  try {\n    const response = await Axios.put(`${ShippingService}area/${id}`, data, header);\n\n    if (response.status === 200) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update item image\n// const UpdateImage = async (id, data, header) => {\n//     try {\n//         const response = await Axios.put(`${ShippingService}brand/image/${id}`, data, header)\n//         if (response.status === 201) {\n//             return response.data\n//         }\n//     } catch (error) {\n//         if (error) return errorHandeller(error)\n//     }\n// }\n// Delete item\n\n\n_c4 = Update;\n\nconst Delete = async (id, header) => {\n  try {\n    const response = await Axios.delete(`${ShippingService}area/${id}`, header);\n\n    if (response.status === 200) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Search item\n\n\n_c5 = Delete;\n\nconst Search = async (data, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}area?query=${data}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Search by district item\n\n\n_c6 = Search;\n\nconst SearchbyDistrict = async (query, data, header) => {\n  try {\n    let queryData = JSON.stringify({\n      query: query,\n      district: data\n    });\n    const response = await Axios.get(`${ShippingService}area?query=${queryData}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n};\n\n_c7 = SearchbyDistrict;\nexport const Area = {\n  Index,\n  Search,\n  Store,\n  Show,\n  Update,\n  Delete,\n  SearchbyDistrict // Filter,\n  // FilterByDateRange\n\n};\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"Show\");\n$RefreshReg$(_c3, \"Store\");\n$RefreshReg$(_c4, \"Update\");\n$RefreshReg$(_c5, \"Delete\");\n$RefreshReg$(_c6, \"Search\");\n$RefreshReg$(_c7, \"SearchbyDistrict\");","map":{"version":3,"sources":["D:/previous/src/utils/Requests/services/shipping-service/area.js"],"names":["Axios","ShippingService","toast","errorHandeller","configure","autoClose","Index","page","limit","header","response","get","status","data","error","Show","id","Store","post","success","message","Update","put","Delete","delete","Search","SearchbyDistrict","query","queryData","JSON","stringify","district","Area"],"mappings":"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","sourcesContent":["import Axios from 'axios'\nimport { ShippingService } from '../../../api'\nimport { toast } from 'react-toastify'\nimport { errorHandeller } from '../../Error'\nimport 'react-toastify/dist/ReactToastify.css'\ntoast.configure({ autoClose: 2000 })\n\n// Index of items\nconst Index = async (page, limit, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}area?page=${page}&limit=${limit}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Show specific item\nconst Show = async (id, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}area/${id}`, header)\n        if (response.status === 200) {\n            return response.data\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Store item\nconst Store = async (data, header) => {\n    try {\n        const response = await Axios.post(`${ShippingService}area`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update specific item\nconst Update = async (id, data, header) => {\n    try {\n        const response = await Axios.put(`${ShippingService}area/${id}`, data, header)\n        if (response.status === 200) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update item image\n// const UpdateImage = async (id, data, header) => {\n//     try {\n//         const response = await Axios.put(`${ShippingService}brand/image/${id}`, data, header)\n//         if (response.status === 201) {\n//             return response.data\n//         }\n//     } catch (error) {\n//         if (error) return errorHandeller(error)\n//     }\n// }\n\n// Delete item\nconst Delete = async (id, header) => {\n    try {\n        const response = await Axios.delete(`${ShippingService}area/${id}`, header)\n        if (response.status === 200) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Search item\nconst Search = async (data, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}area?query=${data}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Search by district item\nconst SearchbyDistrict = async (query, data, header) => {\n    try {\n        let queryData= JSON.stringify({\n            query:query,\n            district:data\n        })\n        const response = await Axios.get(`${ShippingService}area?query=${queryData}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\nexport const Area = {\n    Index,\n    Search,\n    Store,\n    Show,\n    Update,\n    Delete,\n    SearchbyDistrict\n    // Filter,\n    // FilterByDateRange\n}\n"]},"metadata":{},"sourceType":"module"}