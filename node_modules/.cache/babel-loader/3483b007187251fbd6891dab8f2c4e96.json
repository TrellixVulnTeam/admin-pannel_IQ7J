{"ast":null,"code":"import Axios from 'axios';\nimport { api } from '../api';\nimport { toast } from 'react-toastify';\nimport { errorHandeller } from './Error';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure({\n  autoClose: 2000\n}); // List of subscribers\n\nconst Index = async (page, limit, header) => {\n  try {\n    const response = await Axios.get(`${api}subscriber?page=${page}&limit=${limit}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Search item\n\n\n_c = Index;\n\nconst Search = async (data, header) => {\n  try {\n    const response = await Axios.get(`${api}subscriber/search/items?query=${data}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Filter by date\n\n\n_c2 = Search;\n\nconst FilterByDateRange = async (data, header) => {\n  try {\n    const response = await Axios.post(`${api}subscriber/filter-by-date-range`, data, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n};\n\n_c3 = FilterByDateRange;\nconst Subscriber = {\n  Index,\n  Search,\n  FilterByDateRange\n};\nexport default Subscriber;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"Search\");\n$RefreshReg$(_c3, \"FilterByDateRange\");","map":{"version":3,"sources":["D:/previous/src/utils/Requests/Subscriber.js"],"names":["Axios","api","toast","errorHandeller","configure","autoClose","Index","page","limit","header","response","get","status","data","error","Search","FilterByDateRange","post","Subscriber"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,OAAO,uCAAP;AACAD,KAAK,CAACE,SAAN,CAAgB;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAhB,E,CAEA;;AACA,MAAMC,KAAK,GAAG,OAAOC,IAAP,EAAaC,KAAb,EAAoBC,MAApB,KAA+B;AACzC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAW,GAAEV,GAAI,mBAAkBM,IAAK,UAASC,KAAM,EAAvD,EAA0DC,MAA1D,CAAvB;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B,OAAOF,QAAQ,CAACG,IAAhB;AAChC,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,QAAIA,KAAJ,EAAW,OAAOX,cAAc,CAACW,KAAD,CAArB;AACd;AACJ,CAPD,C,CASA;;;KATMR,K;;AAUN,MAAMS,MAAM,GAAG,OAAOF,IAAP,EAAaJ,MAAb,KAAwB;AACnC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAW,GAAEV,GAAI,iCAAgCY,IAAK,EAAtD,EAAyDJ,MAAzD,CAAvB;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B,OAAOF,QAAQ,CAACG,IAAhB;AAChC,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,QAAIA,KAAJ,EAAW,OAAOX,cAAc,CAACW,KAAD,CAArB;AACd;AACJ,CAPD,C,CASA;;;MATMC,M;;AAUN,MAAMC,iBAAiB,GAAG,OAAOH,IAAP,EAAaJ,MAAb,KAAwB;AAC9C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACiB,IAAN,CAAY,GAAEhB,GAAI,iCAAlB,EAAoDY,IAApD,EAA0DJ,MAA1D,CAAvB;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B,OAAOF,QAAQ,CAACG,IAAhB;AAChC,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,QAAIA,KAAJ,EAAW,OAAOX,cAAc,CAACW,KAAD,CAArB;AACd;AACJ,CAPD;;MAAME,iB;AASN,MAAME,UAAU,GAAG;AACfZ,EAAAA,KADe;AAEfS,EAAAA,MAFe;AAGfC,EAAAA;AAHe,CAAnB;AAMA,eAAeE,UAAf","sourcesContent":["import Axios from 'axios'\nimport { api } from '../api'\nimport { toast } from 'react-toastify'\nimport { errorHandeller } from './Error'\nimport 'react-toastify/dist/ReactToastify.css'\ntoast.configure({ autoClose: 2000 })\n\n// List of subscribers\nconst Index = async (page, limit, header) => {\n    try {\n        const response = await Axios.get(`${api}subscriber?page=${page}&limit=${limit}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Search item\nconst Search = async (data, header) => {\n    try {\n        const response = await Axios.get(`${api}subscriber/search/items?query=${data}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Filter by date\nconst FilterByDateRange = async (data, header) => {\n    try {\n        const response = await Axios.post(`${api}subscriber/filter-by-date-range`, data, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\nconst Subscriber = {\n    Index,\n    Search,\n    FilterByDateRange\n}\n\nexport default Subscriber"]},"metadata":{},"sourceType":"module"}