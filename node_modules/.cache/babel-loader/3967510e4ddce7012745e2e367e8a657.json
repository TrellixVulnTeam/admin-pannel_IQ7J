{"ast":null,"code":"import Axios from 'axios';\nimport { api } from '../api';\nimport { toast } from 'react-toastify';\nimport { errorHandeller } from './Error';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure({\n  autoClose: 2000\n}); // Index of category items\n\nconst CategoryIndex = async (page, limit, header) => {\n  try {\n    const response = await Axios.get(`${api}university/category?page=${page}&limit=${limit}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Store a category\n\n\n_c = CategoryIndex;\n\nconst CategoryStore = async (data, header) => {\n  try {\n    const response = await Axios.post(`${api}university/category`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Show specific category\n\n\n_c2 = CategoryStore;\n\nconst CategoryShow = async (id, header) => {\n  try {\n    const response = await Axios.get(`${api}university/category/${id}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Category search\n\n\n_c3 = CategoryShow;\n\nconst CategorySearch = async (query, header) => {\n  try {\n    const response = await Axios.get(`${api}/university/category/search/items?query=${query}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update specific category\n\n\n_c4 = CategorySearch;\n\nconst CategoryUpdate = async (id, data, header) => {\n  try {\n    const response = await Axios.put(`${api}university/category/${id}`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update category image\n\n\n_c5 = CategoryUpdate;\n\nconst UpdateCategoryImage = async (id, data, header) => {\n  try {\n    const response = await Axios.put(`${api}university/category/image/${id}`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Delete specific category\n\n\n_c6 = UpdateCategoryImage;\n\nconst CategoryDelete = async (id, header) => {\n  try {\n    const response = await Axios.delete(`${api}university/category/${id}`, header);\n\n    if (response.status === 200) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Index of post items\n\n\n_c7 = CategoryDelete;\n\nconst PostIndex = async (page, limit, header) => {\n  try {\n    const response = await Axios.get(`${api}university/post?page=${page}&limit=${limit}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Store a post\n\n\n_c8 = PostIndex;\n\nconst PostStore = async (data, header) => {\n  try {\n    const response = await Axios.post(`${api}university/post`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Show specific post\n\n\n_c9 = PostStore;\n\nconst PostShow = async (id, header) => {\n  try {\n    const response = await Axios.get(`${api}university/post/${id}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update specific post\n\n\n_c10 = PostShow;\n\nconst PostUpdate = async (id, data, header) => {\n  try {\n    const response = await Axios.put(`${api}university/post/${id}`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update post image\n\n\n_c11 = PostUpdate;\n\nconst UpdatePostImage = async (id, data, header) => {\n  try {\n    const response = await Axios.put(`${api}university/post/image/${id}`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Delete\n\n\n_c12 = UpdatePostImage;\n\nconst PostDelete = async (id, header) => {\n  try {\n    const response = await Axios.delete(`${api}university/post/${id}`, header);\n\n    if (response.status === 200) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n};\n\n_c13 = PostDelete;\nconst University = {\n  CategoryIndex,\n  CategoryStore,\n  CategoryDelete,\n  CategoryShow,\n  CategorySearch,\n  UpdateCategoryImage,\n  CategoryUpdate,\n  PostStore,\n  PostIndex,\n  PostShow,\n  PostUpdate,\n  UpdatePostImage,\n  PostDelete\n};\nexport default University;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n\n$RefreshReg$(_c, \"CategoryIndex\");\n$RefreshReg$(_c2, \"CategoryStore\");\n$RefreshReg$(_c3, \"CategoryShow\");\n$RefreshReg$(_c4, \"CategorySearch\");\n$RefreshReg$(_c5, \"CategoryUpdate\");\n$RefreshReg$(_c6, \"UpdateCategoryImage\");\n$RefreshReg$(_c7, \"CategoryDelete\");\n$RefreshReg$(_c8, \"PostIndex\");\n$RefreshReg$(_c9, \"PostStore\");\n$RefreshReg$(_c10, \"PostShow\");\n$RefreshReg$(_c11, \"PostUpdate\");\n$RefreshReg$(_c12, \"UpdatePostImage\");\n$RefreshReg$(_c13, \"PostDelete\");","map":{"version":3,"sources":["D:/previous/src/utils/Requests/University.js"],"names":["Axios","api","toast","errorHandeller","configure","autoClose","CategoryIndex","page","limit","header","response","get","status","data","error","CategoryStore","post","success","message","CategoryShow","id","CategorySearch","query","CategoryUpdate","put","UpdateCategoryImage","CategoryDelete","delete","PostIndex","PostStore","PostShow","PostUpdate","UpdatePostImage","PostDelete","University"],"mappings":"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","sourcesContent":["import Axios from 'axios'\nimport { api } from '../api'\nimport { toast } from 'react-toastify'\nimport { errorHandeller } from './Error'\nimport 'react-toastify/dist/ReactToastify.css'\ntoast.configure({ autoClose: 2000 })\n\n// Index of category items\nconst CategoryIndex = async (page, limit, header) => {\n    try {\n        const response = await Axios.get(`${api}university/category?page=${page}&limit=${limit}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Store a category\nconst CategoryStore = async (data, header) => {\n    try {\n        const response = await Axios.post(`${api}university/category`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Show specific category\nconst CategoryShow = async (id, header) => {\n    try {\n        const response = await Axios.get(`${api}university/category/${id}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Category search\nconst CategorySearch = async (query, header) => {\n    try {\n        const response = await Axios.get(`${api}/university/category/search/items?query=${query}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update specific category\nconst CategoryUpdate = async (id, data, header) => {\n    try {\n        const response = await Axios.put(`${api}university/category/${id}`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update category image\nconst UpdateCategoryImage = async (id, data, header) => {\n    try {\n        const response = await Axios.put(`${api}university/category/image/${id}`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Delete specific category\nconst CategoryDelete = async (id, header) => {\n    try {\n        const response = await Axios.delete(`${api}university/category/${id}`, header)\n        if (response.status === 200) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Index of post items\nconst PostIndex = async (page, limit, header) => {\n    try {\n        const response = await Axios.get(`${api}university/post?page=${page}&limit=${limit}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Store a post\nconst PostStore = async (data, header) => {\n    try {\n        const response = await Axios.post(`${api}university/post`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Show specific post\nconst PostShow = async (id, header) => {\n    try {\n        const response = await Axios.get(`${api}university/post/${id}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update specific post\nconst PostUpdate = async (id, data, header) => {\n    try {\n        const response = await Axios.put(`${api}university/post/${id}`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update post image\nconst UpdatePostImage = async (id, data, header) => {\n    try {\n        const response = await Axios.put(`${api}university/post/image/${id}`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Delete\nconst PostDelete = async (id, header) => {\n    try {\n        const response = await Axios.delete(`${api}university/post/${id}`, header)\n        if (response.status === 200) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\nconst University = {\n    CategoryIndex,\n    CategoryStore,\n    CategoryDelete,\n    CategoryShow,\n    CategorySearch,\n    UpdateCategoryImage,\n    CategoryUpdate,\n    PostStore,\n    PostIndex,\n    PostShow,\n    PostUpdate,\n    UpdatePostImage,\n    PostDelete\n}\n\nexport default University\n"]},"metadata":{},"sourceType":"module"}