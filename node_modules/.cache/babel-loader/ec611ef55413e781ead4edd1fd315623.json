{"ast":null,"code":"import Axios from 'axios';\nimport { api } from '../api';\nimport { toast } from 'react-toastify';\nimport { errorHandeller } from './Error';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure({\n  autoClose: 2000\n}); // List of refund\n\nconst Index = async (page, limit, header) => {\n  try {\n    const response = await Axios.get(`${api}refund?page=${page}&limit=${limit}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Show specific refund\n\n\n_c = Index;\n\nconst Show = async (id, header) => {\n  try {\n    const response = await Axios.get(`${api}refund/${id}`, header);\n\n    if (response.status === 200) {\n      return response.data.result;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update specific refund status\n\n\n_c2 = Show;\n\nconst Update = async (id, status, header) => {\n  try {\n    const response = await Axios.put(`${api}refund/${id}`, {\n      status\n    }, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Search item\n\n\n_c3 = Update;\n\nconst Search = async (data, header) => {\n  try {\n    const response = await Axios.get(`${api}refund/search/items?query=${data}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Filter by date\n\n\n_c4 = Search;\n\nconst FilterByDateRange = async (data, header) => {\n  try {\n    const response = await Axios.post(`${api}refund/filter-by-date-range`, data, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n};\n\n_c5 = FilterByDateRange;\nconst Refund = {\n  Index,\n  Show,\n  Update,\n  Search,\n  FilterByDateRange\n};\nexport default Refund;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"Show\");\n$RefreshReg$(_c3, \"Update\");\n$RefreshReg$(_c4, \"Search\");\n$RefreshReg$(_c5, \"FilterByDateRange\");","map":{"version":3,"sources":["D:/previous/src/utils/Requests/Refund.js"],"names":["Axios","api","toast","errorHandeller","configure","autoClose","Index","page","limit","header","response","get","status","data","error","Show","id","result","Update","put","success","message","Search","FilterByDateRange","post","Refund"],"mappings":"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","sourcesContent":["import Axios from 'axios'\nimport { api } from '../api'\nimport { toast } from 'react-toastify'\nimport { errorHandeller } from './Error'\nimport 'react-toastify/dist/ReactToastify.css'\ntoast.configure({ autoClose: 2000 })\n\n// List of refund\nconst Index = async (page, limit, header) => {\n    try {\n        const response = await Axios.get(`${api}refund?page=${page}&limit=${limit}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Show specific refund\nconst Show = async (id, header) => {\n    try {\n        const response = await Axios.get(`${api}refund/${id}`, header)\n        if (response.status === 200) {\n            return response.data.result\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update specific refund status\nconst Update = async (id, status, header) => {\n    try {\n        const response = await Axios.put(`${api}refund/${id}`, { status }, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Search item\nconst Search = async (data, header) => {\n    try {\n        const response = await Axios.get(`${api}refund/search/items?query=${data}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Filter by date\nconst FilterByDateRange = async (data, header) => {\n    try {\n        const response = await Axios.post(`${api}refund/filter-by-date-range`, data, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n\nconst Refund = {\n    Index,\n    Show,\n    Update,\n    Search,\n    FilterByDateRange\n}\n\nexport default Refund"]},"metadata":{},"sourceType":"module"}