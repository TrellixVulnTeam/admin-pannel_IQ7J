{"ast":null,"code":"import Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ShippingService } from '../../../api';\nimport { errorHandeller } from '../../Error';\ntoast.configure({\n  autoClose: 2000\n}); // List of items\n\nconst Index = async (query, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}shipping?${query}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Store items\n\n\n_c = Index;\n\nconst Store = async (data, header) => {\n  try {\n    const response = await Axios.post(`${ShippingService}shipping`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) {\n      return errorHandeller(error);\n    }\n  }\n}; // Show specifi items\n\n\n_c2 = Store;\n\nconst Show = async (id, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}shipping/${id}`, header);\n\n    if (response.status === 200) {\n      return response.data.data;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update specific items\n\n\n_c3 = Show;\n\nconst Update = async (id, data, header) => {\n  try {\n    const response = await Axios.put(`${ShippingService}shipping/${id}`, data, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) {\n      console.log(error.response);\n      return errorHandeller(error);\n    }\n  }\n}; // Delete item\n\n\n_c4 = Update;\n\nconst Delete = async (id, header) => {\n  try {\n    const response = await Axios.delete(`${ShippingService}shipping/${id}`, header);\n\n    if (response.status === 200) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Filter \n\n\n_c5 = Delete;\n\nconst Filter = async (page, limit, data, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}shipping?page=${page}&limit=${limit}&${data.field}=${data.value}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Filter by date\n\n\n_c6 = Filter;\n\nconst FilterByDateRange = async (data, header) => {\n  try {\n    const response = await Axios.post(`${ShippingService}shipping/date-range-filter`, data, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // get district by divisions items\n\n\n_c7 = FilterByDateRange;\n\nconst DistrictsByDivision = async (data, header) => {\n  try {\n    const response = await Axios.post(`${ShippingService}get-district-by-division`, data, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) {\n      return errorHandeller(error);\n    }\n  }\n}; // get areas by disttricts items\n\n\n_c8 = DistrictsByDivision;\n\nconst AreasByDistrict = async (data, header) => {\n  try {\n    const response = await Axios.post(`${ShippingService}get-area-by-district`, data, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) {\n      return errorHandeller(error);\n    }\n  }\n}; // Index of division\n\n\n_c9 = AreasByDistrict;\n\nconst DivisionList = async header => {\n  try {\n    const response = await Axios.get(`${ShippingService}division`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // get district by division\n\n\n_c10 = DivisionList;\n\nconst DistrictList = async (id, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}get-district-by-division-cart/${id}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // get area by district\n\n\n_c11 = DistrictList;\n\nconst AreaList = async (id, header) => {\n  try {\n    const response = await Axios.get(`${ShippingService}get-area-by-district-cart/${id}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n};\n\n_c12 = AreaList;\nexport const MainShipping = {\n  Index,\n  Store,\n  Show,\n  Update,\n  Delete,\n  Filter,\n  FilterByDateRange,\n  DistrictsByDivision,\n  AreasByDistrict,\n  DivisionList,\n  DistrictList,\n  AreaList\n};\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"Store\");\n$RefreshReg$(_c3, \"Show\");\n$RefreshReg$(_c4, \"Update\");\n$RefreshReg$(_c5, \"Delete\");\n$RefreshReg$(_c6, \"Filter\");\n$RefreshReg$(_c7, \"FilterByDateRange\");\n$RefreshReg$(_c8, \"DistrictsByDivision\");\n$RefreshReg$(_c9, \"AreasByDistrict\");\n$RefreshReg$(_c10, \"DivisionList\");\n$RefreshReg$(_c11, \"DistrictList\");\n$RefreshReg$(_c12, \"AreaList\");","map":{"version":3,"sources":["D:/previous/src/utils/Requests/services/shipping-service/shipping.js"],"names":["Axios","toast","ShippingService","errorHandeller","configure","autoClose","Index","query","header","response","get","status","data","error","Store","post","success","message","Show","id","Update","put","console","log","Delete","delete","Filter","page","limit","field","value","FilterByDateRange","DistrictsByDivision","AreasByDistrict","DivisionList","DistrictList","AreaList","MainShipping"],"mappings":"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","sourcesContent":["import Axios from 'axios'\nimport { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { ShippingService } from '../../../api'\nimport { errorHandeller } from '../../Error'\ntoast.configure({ autoClose: 2000 })\n\n// List of items\nconst Index = async (query, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}shipping?${query}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Store items\nconst Store = async (data, header) => {\n    try {\n        const response = await Axios.post(`${ShippingService}shipping`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) {\n            return errorHandeller(error)\n        }\n    }\n}\n\n// Show specifi items\nconst Show = async (id, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}shipping/${id}`, header)\n        if (response.status === 200) {\n            return response.data.data\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Update specific items\nconst Update = async (id, data, header) => {\n    try {\n        const response = await Axios.put(`${ShippingService}shipping/${id}`, data, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) {\n            console.log(error.response)\n            return errorHandeller(error)\n        }\n    }\n}\n\n// Delete item\nconst Delete = async (id, header) => {\n    try {\n        const response = await Axios.delete(`${ShippingService}shipping/${id}`, header)\n        if (response.status === 200) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Filter \nconst Filter = async (page, limit, data, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}shipping?page=${page}&limit=${limit}&${data.field}=${data.value}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Filter by date\nconst FilterByDateRange = async (data, header) => {\n    try {\n        const response = await Axios.post(`${ShippingService}shipping/date-range-filter`, data, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// get district by divisions items\nconst DistrictsByDivision = async (data, header) => {\n    try {\n        const response = await Axios.post(`${ShippingService}get-district-by-division`, data, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) {\n            return errorHandeller(error)\n        }\n    }\n}\n\n// get areas by disttricts items\nconst AreasByDistrict = async (data, header) => {\n    try {\n        const response = await Axios.post(`${ShippingService}get-area-by-district`, data, header)\n        if (response.status === 200) return response.data\n\n    } catch (error) {\n        if (error) {\n            return errorHandeller(error)\n        }\n    }\n}\n\n// Index of division\nconst DivisionList = async (header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}division`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// get district by division\nconst DistrictList = async (id, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}get-district-by-division-cart/${id}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n\n// get area by district\nconst AreaList = async (id, header) => {\n    try {\n        const response = await Axios.get(`${ShippingService}get-area-by-district-cart/${id}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\nexport const MainShipping = {\n    Index,\n    Store,\n    Show,\n    Update,\n    Delete,\n    Filter,\n    FilterByDateRange,\n    DistrictsByDivision,\n    AreasByDistrict,\n    DivisionList,\n    DistrictList,\n    AreaList\n}"]},"metadata":{},"sourceType":"module"}