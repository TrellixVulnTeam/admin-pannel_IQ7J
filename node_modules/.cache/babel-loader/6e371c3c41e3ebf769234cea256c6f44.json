{"ast":null,"code":"import Axios from 'axios';\nimport { api } from '../api';\nimport { toast } from 'react-toastify';\nimport { errorHandeller } from './Error';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure({\n  autoClose: 2000\n}); // List of products\n\nconst Index = async (query, header) => {\n  try {\n    const response = await Axios.get(`${api}product/pending/items?${query}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Search product in vendor pending\n\n\n_c = Index;\n\nconst Search = async (data, header) => {\n  try {\n    const response = await Axios.get(`${api}product/pending/search/items?query=${data}`, header);\n    if (response.status === 200) return response.data;\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n}; // Update request status\n\n\n_c2 = Search;\n\nconst Update = async (id, header) => {\n  try {\n    const response = await Axios.get(`${api}product/pending/${id}`, header);\n\n    if (response.status === 201) {\n      toast.success(response.data.message);\n      return true;\n    }\n  } catch (error) {\n    if (error) return errorHandeller(error);\n  }\n};\n\n_c3 = Update;\nconst PendingProduct = {\n  Index,\n  Search,\n  Update\n};\nexport default PendingProduct;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"Search\");\n$RefreshReg$(_c3, \"Update\");","map":{"version":3,"sources":["D:/previous/src/utils/Requests/PendingProduct.js"],"names":["Axios","api","toast","errorHandeller","configure","autoClose","Index","query","header","response","get","status","data","error","Search","Update","id","success","message","PendingProduct"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,OAAO,uCAAP;AACAD,KAAK,CAACE,SAAN,CAAgB;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAhB,E,CAEA;;AACA,MAAMC,KAAK,GAAG,OAAOC,KAAP,EAAcC,MAAd,KAAyB;AACnC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAET,GAAI,yBAAwBM,KAAM,EAA/C,EAAkDC,MAAlD,CAAvB;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B,OAAOF,QAAQ,CAACG,IAAhB;AAChC,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,QAAIA,KAAJ,EAAW,OAAOV,cAAc,CAACU,KAAD,CAArB;AACd;AACJ,CAPD,C,CASA;;;KATMP,K;;AAUN,MAAMQ,MAAM,GAAG,OAAOF,IAAP,EAAaJ,MAAb,KAAwB;AACnC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAET,GAAI,sCAAqCW,IAAK,EAA3D,EAA8DJ,MAA9D,CAAvB;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B,OAAOF,QAAQ,CAACG,IAAhB;AAChC,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,QAAIA,KAAJ,EAAW,OAAOV,cAAc,CAACU,KAAD,CAArB;AACd;AACJ,CAPD,C,CAUA;;;MAVMC,M;;AAWN,MAAMC,MAAM,GAAG,OAAOC,EAAP,EAAWR,MAAX,KAAsB;AACjC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAET,GAAI,mBAAkBe,EAAG,EAAtC,EAAyCR,MAAzC,CAAvB;;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBT,MAAAA,KAAK,CAACe,OAAN,CAAcR,QAAQ,CAACG,IAAT,CAAcM,OAA5B;AACA,aAAO,IAAP;AACH;AACJ,GAND,CAME,OAAOL,KAAP,EAAc;AACZ,QAAIA,KAAJ,EAAW,OAAOV,cAAc,CAACU,KAAD,CAArB;AACd;AACJ,CAVD;;MAAME,M;AAaN,MAAMI,cAAc,GAAG;AACnBb,EAAAA,KADmB;AAEnBQ,EAAAA,MAFmB;AAGnBC,EAAAA;AAHmB,CAAvB;AAMA,eAAeI,cAAf","sourcesContent":["import Axios from 'axios'\nimport { api } from '../api'\nimport { toast } from 'react-toastify'\nimport { errorHandeller } from './Error'\nimport 'react-toastify/dist/ReactToastify.css'\ntoast.configure({ autoClose: 2000 })\n\n// List of products\nconst Index = async (query, header) => {\n    try {\n        const response = await Axios.get(`${api}product/pending/items?${query}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n// Search product in vendor pending\nconst Search = async (data, header) => {\n    try {\n        const response = await Axios.get(`${api}product/pending/search/items?query=${data}`, header)\n        if (response.status === 200) return response.data\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n\n// Update request status\nconst Update = async (id, header) => {\n    try {\n        const response = await Axios.get(`${api}product/pending/${id}`, header)\n        if (response.status === 201) {\n            toast.success(response.data.message)\n            return true\n        }\n    } catch (error) {\n        if (error) return errorHandeller(error)\n    }\n}\n\n\nconst PendingProduct = {\n    Index,\n    Search,\n    Update\n}\n\nexport default PendingProduct"]},"metadata":{},"sourceType":"module"}